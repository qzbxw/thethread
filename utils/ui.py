from aiogram import types
from models.database import db
from config import Config
import logging

def _noop_btn(text: str) -> types.InlineKeyboardButton:
    return types.InlineKeyboardButton(text=text, callback_data="noop")

def main_menu_kb(balance: int | None = None, free_available: bool | None = None) -> types.InlineKeyboardMarkup:
    free_text = "üÉè –ö–∞—Ä—Ç–∞ –î–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)" if (free_available is None or free_available) else "üÉè –ö–∞—Ä—Ç–∞ –î–Ω—è ‚Äî –∑–∞–≤—Ç—Ä–∞"
    free_button = types.InlineKeyboardButton(text=free_text, callback_data="tarot_free" if (free_available is None or free_available) else "noop_free_cd")

    keyboard = [
        [free_button],
        [types.InlineKeyboardButton(text=f"‚ö°Ô∏è –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å–∫–ª–∞–¥ ({Config.TAROT_QUICK_COST} üíé)", callback_data="tarot_quick")],
        [types.InlineKeyboardButton(text=f"üîÆ –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ ({Config.TAROT_DEEP_COST} üíé)", callback_data="tarot_deep")],
        [types.InlineKeyboardButton(text="üíº –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="balance")],
        [types.InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã", callback_data="buy_crystals")],
        [types.InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
    ]
    return types.InlineKeyboardMarkup(inline_keyboard=keyboard)


def crystals_menu_kb() -> types.InlineKeyboardMarkup:
    def _fmt(cents: int) -> str:
        return f"${cents/100:.2f}"
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"–ü—Ä–æ–±–Ω–∏–∫ ‚Äî {Config.CRYSTALS_PROBE} üíé ({_fmt(Config.PRICE_PROBE_CENTS)})", callback_data="buy_probe")],
        [types.InlineKeyboardButton(text=f"–°—Ç–∞–Ω–¥–∞—Ä—Ç ‚Äî {Config.CRYSTALS_STANDARD} üíé ({_fmt(Config.PRICE_STANDARD_CENTS)})", callback_data="buy_standard")],
        [types.InlineKeyboardButton(text=f"–ü—Ä–µ–º–∏—É–º ‚Äî {Config.CRYSTALS_PREMIUM} üíé ({_fmt(Config.PRICE_PREMIUM_CENTS)})", callback_data="buy_premium")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])


def incognito_preset_kb(incognito_enabled: bool) -> types.InlineKeyboardMarkup:
    toggle_text = "üîì –í—ã–∫–ª—é—á–∏—Ç—å –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ" if incognito_enabled else "ü§´ –í–∫–ª—é—á–∏—Ç—å –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ"
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=toggle_text, callback_data="toggle_incognito")],
        [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data="proceed_dialog")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])


def incognito_preset_kb_disabled(incognito_enabled: bool) -> types.InlineKeyboardMarkup:
    """Disabled version while processing to prevent double taps."""
    toggle_text = "üîì –í—ã–∫–ª—é—á–∏—Ç—å –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ" if incognito_enabled else "ü§´ –í–∫–ª—é—á–∏—Ç—å –ò–Ω–∫–æ–≥–Ω–∏—Ç–æ"
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [_noop_btn(f"‚è≥ {toggle_text}")],
        [_noop_btn("‚è≥ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ‚Ä¶")],
        [_noop_btn("‚è≥ –ù–∞–∑–∞–¥")],
    ])


def end_dialog_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üõë –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")]
    ])


def confirm_spend_kb(action: str, cost: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text=f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚àí{cost} üíé", callback_data=f"confirm_spend:{action}")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])


def confirm_spend_kb_disabled(cost: int) -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [_noop_btn(f"‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚àí{cost} üíé‚Ä¶")],
        [_noop_btn("‚è≥ –ù–∞–∑–∞–¥")],
    ])


def help_menu_kb() -> types.InlineKeyboardMarkup:
    return types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùì –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data="how_it_works")],
        [types.InlineKeyboardButton(text="üîê –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="privacy")],
        [types.InlineKeyboardButton(text="üìú –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="terms")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")],
    ])


async def set_active_kb(message: types.Message):
    try:
        user_id = message.chat.id  
        prev_id = await db.get_active_message_id(user_id)
        if prev_id and prev_id != message.message_id:
            try:
                await message.bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=prev_id, reply_markup=None)
            except Exception as e:
                logging.debug(f"Failed to clear previous inline keyboard for user {user_id}: {e}")
        await db.set_active_message_id(user_id, message.message_id)
    except Exception as e:
        logging.warning(f"set_active_kb failed for message {getattr(message, 'message_id', None)}: {e}")
